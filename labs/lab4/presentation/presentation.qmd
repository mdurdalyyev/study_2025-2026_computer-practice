---
## Front matter
lang: ru-RU
title: Лабораторная работа №4
subtitle: "Линейная алгебра"
author:
  - Дурдалыев Максат
teacher:
  - Кулябов Д. С.
  - д.ф.-м.н., профессор
  - профессор кафедры теории вероятностей и кибербезопасности 
institute:
  - Российский университет дружбы народов имени Патриса Лумумбы, Москва, Россия
date: today
date-format: "YYYY-MM-DD" # Example: 2025-09-06

## i18n babel
babel-lang: russian
babel-otherlangs: english
---

## Докладчик

:::::::::::::: {.columns align=center}
::: {.column width="70%"}

  * Дурдалыев Максат
  * Cтудент НКНбд-01-22
  * Российский университет дружбы народов имени Патриса Лумумбы
  * [1132205337@pfur.ru](mailto:1132205337@pfur.ru)
  * <https://github.com/mdurdalyyev>

:::
::: {.column width="30%"}

![](./image/durdalyyev.jpg)

:::
::::::::::::::

## Цели и задачи

**Цель работы**

Основной целью работы является изучение возможностей специализированных пакетов Julia для выполнения и оценки эффективности операций над объектами линейной алгебры.

**Задание**

1. Используя Jupyter Lab, повторите примеры.
2. Выполните задания для самостоятельной работы.

##  Поэлементные операции над многомерными массивами

![Поэлементные операции сложения и произведения элементов матрицы](image/1.png){ #fig:001 width=90% height=90% }

##  Поэлементные операции над многомерными массивами

![Поэлементные операции сложения и произведения элементов матрицы](image/2.png){ #fig:002 width=100% height=100% }

##  Поэлементные операции над многомерными массивами

![Использование возможностей пакета Statistics для работы со средними значениями](image/3.png){ #fig:003 width=80% height=80% }

## Транспонирование, след, ранг, определитель и инверсия матрицы

![Использование библиотеки LinearAlgebra для выполнения определённых операций](image/4.png){ #fig:004 width=80% height=80% }

## Транспонирование, след, ранг, определитель и инверсия матрицы

![Использование библиотеки LinearAlgebra для выполнения определённых операций](image/5.png){ #fig:005 width=100% height=100% }

## Транспонирование, след, ранг, определитель и инверсия матрицы

![Использование библиотеки LinearAlgebra для выполнения определённых операций](image/6.png){ #fig:006 width=100% height=100% }

## Вычисление нормы векторов и матриц, повороты, вращения

![Использование LinearAlgebra.norm(x)](image/7.png){ #fig:007 width=90% height=90% }

## Вычисление нормы векторов и матриц, повороты, вращения

![Использование LinearAlgebra.norm(x)](image/8.png){ #fig:008 width=100% height=100% }

## Вычисление нормы векторов и матриц, повороты, вращения

![Вычисление нормы для двумерной матрицы](image/9.png){ #fig:009 width=90% height=90% }

## Вычисление нормы векторов и матриц, повороты, вращения

![Вычисление нормы для двумерной матрицы](image/10.png){ #fig:010 width=100% height=100% }

## Матричное умножение, единичная матрица, скалярное произведение

![Примеры матричного умножения, единичной матрицы и скалярного произведения](image/11.png){ #fig:011 width=90% height=90% }

## Матричное умножение, единичная матрица, скалярное произведение

![Примеры матричного умножения, единичной матрицы и скалярного произведения](image/12.png){ #fig:012 width=100% height=100% }

## Факторизация. Специальные матричные структуры

![Решение систем линейный алгебраических уравнений Ax = b](image/13.png){ #fig:013 width=80% height=80% }

## Факторизация. Специальные матричные структуры

Julia позволяет вычислять LU-факторизацию и определяет составной тип факторизации для его хранения:

![Пример вычисления LU-факторизации и определение составного типа факторизации для его хранения](image/14.png){ #fig:014 width=70% height=70% }

## Факторизация. Специальные матричные структуры

![Пример вычисления LU-факторизации и определение составного типа факторизации для его хранения](image/15.png){ #fig:015 width=100% height=100% }

## Факторизация. Специальные матричные структуры

Исходная система уравнений Ax = b может быть решена или с использованием исходной матрицы, или с использованием объекта факторизации:

![Пример решения с использованием исходной матрицы и с использованием объекта факторизации](image/16.png){ #fig:016 width=80% height=80% }

## Факторизация. Специальные матричные структуры

Julia позволяет вычислять QR-факторизацию и определяет составной тип факторизации для его хранения:

![Пример вычисления QR-факторизации и определение составного типа факторизации для его хранения](image/17.png){ #fig:017 width=70% height=70% }

## Факторизация. Специальные матричные структуры

![Примеры собственной декомпозиции матрицы](image/18.png){ #fig:018 width=80% height=80% }

## Факторизация. Специальные матричные структуры

![Примеры собственной декомпозиции матрицы](image/19.png){ #fig:019 width=100% height=100% }

## Факторизация. Специальные матричные структуры

Далее рассмотрим примеры работы с матрицами большой размерности и специальной структуры:

![Примеры работы с матрицами большой размерности и специальной структуры](image/20.png){ #fig:020 width=100% height=100% }

## Факторизация. Специальные матричные структуры

![Примеры работы с матрицами большой размерности и специальной структуры](image/21.png){ #fig:021 width=100% height=100% }

## Факторизация. Специальные матричные структуры

Пример добавления шума в симметричную матрицу (матрица уже не будет симметричной):

![Пример добавления шума в симметричную матрицу](image/22.png){ #fig:022 width=100% height=100% }

## Факторизация. Специальные матричные структуры

В Julia можно объявить структуру матрица явно, например, используя Diagonal, Triangular,  Symmetric, Hermitian, Tridiagonal и SymTridiagonal:

![Пример явного объявления структуры матрицы](image/23.png){ #fig:023 width=100% height=100% }

## Факторизация. Специальные матричные структуры

Далее для оценки эффективности выполнения операций над матрицами большой размерности и специальной структуры воспользуемся пакетом BenchmarkTools:

![Использование пакета BenchmarkTools](image/24.png){ #fig:024 width=70% height=70% }

## Факторизация. Специальные матричные структуры

Далее рассмотрим примеры работы с разряженными матрицами большой размерности.
Использование типов Tridiagonal и SymTridiagonal для хранения трёхдиагональных матриц позволяет работать с потенциально очень большими трёхдиагональными матрицами:

![Примеры работы с разряженными матрицами большой размерности](image/25.png){ #fig:025 width=100% height=100% }

## Общая линейная алгебра

В примере показано, как можно решить систему линейных уравнений с рациональными элементами без преобразования в типы элементов с плавающей запятой (для избежания проблемы с переполнением используем BigInt):

![Решение системы линейных уравнений с рациональными элементами без преобразования в типы элементов с плавающей запятой](image/26.png){ #fig:026 width=100% height=100% }

## Самостоятельная работа

![Решение задания "Произведение векторов"](image/27.png){ #fig:027 width=100% height=100% }

## Самостоятельная работа

![Решение задания "Системы линейных уравнений"](image/28.png){ #fig:028 width=100% height=100% }

## Самостоятельная работа

![Решение задания "Системы линейных уравнений"](image/29.png){ #fig:029 width=100% height=100% }

## Самостоятельная работа

![Решение задания "Системы линейных уравнений"](image/30.png){ #fig:030 width=100% height=100% }

## Самостоятельная работа

![Решение задания "Операции с матрицами"](image/31.png){ #fig:031 width=80% height=80% }

## Самостоятельная работа

![Решение задания "Операции с матрицами"](image/32.png){ #fig:032 width=80% height=80% }

## Самостоятельная работа

![Решение задания "Операции с матрицами"](image/33.png){ #fig:033 width=100% height=100% }

## Самостоятельная работа

![Решение задания "Операции с матрицами"](image/34.png){ #fig:034 width=80% height=80% }

## Самостоятельная работа

![Решение задания "Линейные модели экономики"](image/35.png){ #fig:035 width=90% height=90% }

## Самостоятельная работа

![Решение задания "Линейные модели экономики"](image/36.png){ #fig:036 width=100% height=100% }

## Самостоятельная работа

![Решение задания "Линейные модели экономики"](image/37.png){ #fig:037 width=100% height=100% }

## Выводы

В результате выполнения данной лабораторной работы я изучил возможности специализированных пакетов Julia для выполнения и оценки эффективности операций над объектами линейной алгебры.